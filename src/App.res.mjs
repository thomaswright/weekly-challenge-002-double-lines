// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function cornerOrientation(ax, ay, cx, cy, mod) {
  var match = Caml_obj.greaterthan(cx, ax);
  var match$1 = Caml_obj.greaterthan(cy, ay);
  if (match) {
    if (match$1) {
      if (mod) {
        return "TR";
      } else {
        return "BL";
      }
    } else if (mod) {
      return "BR";
    } else {
      return "TL";
    }
  } else if (match$1) {
    if (mod) {
      return "TL";
    } else {
      return "BR";
    }
  } else if (mod) {
    return "BL";
  } else {
    return "TR";
  }
}

function App(props) {
  var points = [
    [
      100,
      100
    ],
    [
      500,
      100
    ],
    [
      500,
      400
    ],
    [
      300,
      400
    ],
    [
      300,
      600
    ],
    [
      1000,
      600
    ],
    [
      1000,
      200
    ],
    [
      200,
      200
    ]
  ];
  var box = function (t, l, h, w, c) {
    return JsxRuntime.jsx("div", {
                style: {
                  backgroundColor: c,
                  height: String(h) + "px",
                  left: String(l) + "px",
                  position: "fixed",
                  top: String(t) + "px",
                  width: String(w) + "px"
                }
              });
  };
  var red = "#f87171";
  var blue = "#3730a3";
  return JsxRuntime.jsx("div", {
              children: Core__Array.reduceWithIndex(points, [], (function (arr, cur, i) {
                      var ay = cur[1];
                      var ax = cur[0];
                      var match = points[i + 1 | 0];
                      var match$1 = points[i + 2 | 0];
                      var tmp;
                      if (match !== undefined) {
                        if (match$1 !== undefined) {
                          var by = match[1];
                          var bx = match[0];
                          var w = Math.abs(bx - ax | 0) | 0;
                          var h = Math.abs(by - ay | 0) | 0;
                          var horz = i % 2 === 0;
                          var edges = horz ? (
                              bx > ax ? [
                                  box(ay, ax, 10, w, red),
                                  box(ay - 10 | 0, ax, 10, w, blue)
                                ] : [
                                  box(by - 10 | 0, bx, 10, w, red),
                                  box(by, bx, 10, w, blue)
                                ]
                            ) : (
                              by > ay ? [
                                  box(ay, ax, h, 10, blue),
                                  box(ay, ax - 10 | 0, h, 10, red)
                                ] : [
                                  box(by, bx - 10 | 0, h, 10, blue),
                                  box(by, bx, h, 10, red)
                                ]
                            );
                          var match$2 = cornerOrientation(ax, ay, match$1[0], match$1[1], horz);
                          var corner;
                          switch (match$2) {
                            case "TR" :
                                corner = [box(by - 10 | 0, bx, 10, 10, horz ? blue : red)];
                                break;
                            case "BR" :
                                corner = [box(by, bx, 10, 10, horz ? red : blue)];
                                break;
                            case "TL" :
                                corner = [box(by - 10 | 0, bx - 10 | 0, 10, 10, horz ? red : blue)];
                                break;
                            case "BL" :
                                corner = [box(by, bx - 10 | 0, 10, 10, horz ? blue : red)];
                                break;
                            
                          }
                          tmp = edges.concat(corner);
                        } else {
                          tmp = [null];
                        }
                      } else {
                        tmp = [null];
                      }
                      return arr.concat(tmp);
                    })),
              className: "p-6"
            });
}

var make = App;

export {
  make ,
}
/* react/jsx-runtime Not a pure module */

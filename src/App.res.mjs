// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        return [];
      });
  var setPoints = match[1];
  var points = match[0];
  var match$1 = React.useState(function () {
        return [
                20,
                20
              ];
      });
  var setNewPoint = match$1[1];
  var match$2 = match$1[0];
  var box = function (t, l, h, w, c, key) {
    return JsxRuntime.jsx("div", {
                style: {
                  backgroundColor: c,
                  height: String(h) + "px",
                  left: String(l) + "px",
                  position: "absolute",
                  top: String(t) + "px",
                  width: String(w) + "px"
                }
              }, key);
  };
  var red = "#f87171";
  var blue = "#3730a3";
  var yellow = "#f59e0b";
  var match$3 = points[points.length - 1 | 0];
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      Core__Array.reduceWithIndex(points, [], (function (arr, cur, i) {
                              var ay = cur[1];
                              var ax = cur[0];
                              var match = points[i + 1 | 0];
                              var match$1 = points[i + 2 | 0];
                              var tmp;
                              if (match !== undefined) {
                                var by = match[1];
                                var bx = match[0];
                                var w = Math.abs(bx - ax | 0) | 0;
                                var h = Math.abs(by - ay | 0) | 0;
                                var horz = i % 2 === 0;
                                var key = function (s) {
                                  return s + i.toString();
                                };
                                var edges = horz ? (
                                    bx > ax ? [
                                        box(ay, ax, 10, w, red, key("edgeA")),
                                        box(ay - 10 | 0, ax, 10, w, blue, key("edgeB"))
                                      ] : [
                                        box(by - 10 | 0, bx, 10, w, red, key("edgeA")),
                                        box(by, bx, 10, w, blue, key("edgeB"))
                                      ]
                                  ) : (
                                    by > ay ? [
                                        box(ay, ax, h, 10, blue, key("edgeA")),
                                        box(ay, ax - 10 | 0, h, 10, red, key("edgeB"))
                                      ] : [
                                        box(by, bx - 10 | 0, h, 10, blue, key("edgeA")),
                                        box(by, bx, h, 10, red, key("edgeB"))
                                      ]
                                  );
                                var corner;
                                if (match$1 !== undefined) {
                                  var match$2 = match$1[0] > ax;
                                  var match$3 = match$1[1] > ay;
                                  corner = match$2 ? (
                                      match$3 ? (
                                          horz ? [box(by - 10 | 0, bx, 10, 10, blue, key("corner"))] : [box(by, bx - 10 | 0, 10, 10, red, key("corner"))]
                                        ) : (
                                          horz ? [box(by, bx, 10, 10, red, key("corner"))] : [box(by - 10 | 0, bx - 10 | 0, 10, 10, blue, key("corner"))]
                                        )
                                    ) : (
                                      match$3 ? (
                                          horz ? [box(by - 10 | 0, bx - 10 | 0, 10, 10, red, key("corner"))] : [box(by, bx, 10, 10, blue, key("corner"))]
                                        ) : (
                                          horz ? [box(by, bx - 10 | 0, 10, 10, blue, key("corner"))] : [box(by - 10 | 0, bx, 10, 10, red, key("corner"))]
                                        )
                                    );
                                } else {
                                  corner = [];
                                }
                                tmp = edges.concat(corner);
                              } else {
                                tmp = [null];
                              }
                              return arr.concat(tmp);
                            })),
                      match$3 !== undefined ? box(match$3[1] - 10 | 0, match$3[0] - 10 | 0, 20, 20, yellow, "head") : null,
                      box(match$2[1] - 10 | 0, match$2[0] - 10 | 0, 20, 20, yellow, "newPoint")
                    ],
                    className: "w-[500px] h-[500px] m-5 border-4 border-black",
                    onMouseMove: (function (e) {
                        setNewPoint(function (param) {
                              var posX = e.clientX;
                              var posY = e.clientY;
                              if (points.length === 0) {
                                return [
                                        posX,
                                        posY
                                      ];
                              } else if (points.length % 2 === 0) {
                                return [
                                        param[0],
                                        posY
                                      ];
                              } else {
                                return [
                                        posX,
                                        param[1]
                                      ];
                              }
                            });
                      }),
                    onMouseUp: (function (e) {
                        var posX = e.clientX;
                        var posY = e.clientY;
                        setPoints(function (p) {
                              var len = p.length;
                              if (len === 0) {
                                return [[
                                          posX,
                                          posY
                                        ]];
                              }
                              var match = p[len - 1 | 0];
                              var $$new = len % 2 === 0 ? [[
                                    match[0],
                                    posY
                                  ]] : [[
                                    posX,
                                    match[1]
                                  ]];
                              return p.concat($$new);
                            });
                        setNewPoint(function (param) {
                              return [
                                      posX,
                                      posY
                                    ];
                            });
                      })
                  }),
              className: "overflow-scroll "
            });
}

var make = App;

export {
  make ,
}
/* react Not a pure module */
